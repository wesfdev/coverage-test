name: CI

on:
  push:
    branches:
      - '**'

env:
  MIX_ENV: test
  COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
  COVERALLS_URL: ${{ secrets.COVERALLS_URL }} 


jobs:
  run-format:
    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        otp: ['25.0.4']       # Define the OTP version [required]
        elixir: ['1.14.1']    # Define the elixir version [required]    

    steps:
    - name: Print gitHub values
      run: |
        echo "GitHub github.event_name: ${{ github.event_name }}"
        echo "Github github.event.pull_request: ${{ github.event.pull_request }}"
        echo "Github github.sha: ${{ github.sha }}"
        echo "Github github.event.pull_request.head.sha: ${{ github.event.pull_request.head.sha }}"
        echo "Github github.ref_name: ${{ github.ref_name }}"
        echo "Github github.head_ref: ${{ github.head_ref }}"
        echo "Github github.repository: ${{ github.repository }}"
        
    # Step: Setup Elixir + Erlang image as the base.
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{matrix.otp}}
        elixir-version: ${{matrix.elixir}}

    # Step: Check out the code.
    - name: Checkout code
      uses: actions/checkout@v3

    # Step: Define how to cache deps. Restores existing cache if present.
    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-elixir-deps
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-

    - name: Cache compiled build
      id: cache-build
      uses: actions/cache@v3
      env:
        cache-name: cache-compiled-build
      with:
        path: _build
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
          ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get

    - name: Compiles without warnings
      run: mix compile --warnings-as-errors

    - name: Check Formatting
      run: mix format --check-formatted

  fetch_pr_number:
    runs-on: ubuntu-latest
    needs: run-format
    outputs:
      pr_number: ${{ steps.get_pr_number.outputs.pr_number }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get PR Number
        id: get_pr_number
        run: |
          USER=$(echo "${{ github.repository }}" | cut -d'/' -f1)
          echo "USER: $USER"

          # Fetch PRs using curl
          response=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls?state=open&head=$USER:${{ github.head_ref || github.ref_name }}")

          # Extract PR number using jq
          PR_NUMBER=$(echo "$response" | jq '.[0].number')

          # Set the PR number as an output
          echo "PR_NUMBER: $PR_NUMBER"
          echo "::set-output name=pr_number::$PR_NUMBER"

  gatekeeper:
    runs-on: ubuntu-latest
    needs: fetch_pr_number

    outputs:
      should_run: ${{ steps.determine.outputs.should_run }}

    steps:
      - name: Determine if this workflow should run
        id: determine
        run: |
          BRANCH=$(echo "${{ github.head_ref || github.ref_name }}")
          if [[ "$BRANCH" == "main" ]] || [[ "$BRANCH" == "master" ]]; then
            SHOULD_RUN=$(echo "true")
            echo "SHOULD_RUN: $SHOULD_RUN"
            echo "::set-output name=should_run::$SHOULD_RUN"          
          else
            SHOULD_RUN=$(echo "false")
            echo "SHOULD_RUN: $SHOULD_RUN"
            echo "::set-output name=should_run::$SHOULD_RUN"
          fi

  post-tests:
    runs-on: ubuntu-latest
    needs: 
      - fetch_pr_number
      - gatekeeper
    if: needs.gatekeeper.outputs.should_run == 'true'
    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}

    strategy:
      matrix:
        otp: ['25.0.4']       # Define the OTP version [required]
        elixir: ['1.14.1']    # Define the elixir version [required]    

    steps:
    # Step: Setup Elixir + Erlang image as the base.
    - name: Set up Elixir
      uses: erlef/setup-beam@v1
      with:
        otp-version: ${{matrix.otp}}
        elixir-version: ${{matrix.elixir}}

    # Step: Check out the code.
    - name: Checkout code
      uses: actions/checkout@v3

    # Step: Define how to cache deps. Restores existing cache if present.
    - name: Cache deps
      id: cache-deps
      uses: actions/cache@v3
      env:
        cache-name: cache-elixir-deps
      with:
        path: deps
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-

    - name: Cache compiled build
      id: cache-build
      uses: actions/cache@v3
      env:
        cache-name: cache-compiled-build
      with:
        path: _build
        key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
        restore-keys: |
          ${{ runner.os }}-mix-${{ env.cache-name }}-
          ${{ runner.os }}-mix-

    - name: Install dependencies
      run: mix deps.get

    - name: Compiles without warnings
      run: mix compile --warnings-as-errors

    - name: Run Coveralls
      run: MIX_ENV=test mix coveralls.post  --branch "${{ github.head_ref || github.ref_name }}" --name "github_ci_workflow" --committer "${{ github.actor }}" --sha "${{ github.event.pull_request.head.sha || github.sha }}" --message "${{ github.event.head_commit.message }}"

  comment-pull-request:
    runs-on: ubuntu-latest
    needs: 
      - fetch_pr_number
      - post-tests
    if: needs.fetch_pr_number.outputs.pr_number != 'null'
    name: A job to generate comment based on code coverage

    steps:
      - name: Code coverage action step
        id: code_coverage
        uses: wesfdev/my-cc-g-action@v1.14
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PUSHED_GITHUB_SHA: ${{ github.event.pull_request.head.sha || github.sha}}
          GITHUB_BRANCH: ${{ github.head_ref || github.ref_name }}
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          COVERALLS_URL: ${{ secrets.COVERALLS_URL }}
          PR_NUMBER: ${{ needs.fetch_pr_number.outputs.pr_number }}
